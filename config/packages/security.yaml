security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider


    providers:
        users_in_memory: { memory: null }

        mongodb_provider:
            mongodb:
                class: App\Document\UsersDocument
                property: email
                manager_name: default

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        main:
            lazy: true
            provider: mongodb_provider
            form_login:
                login_path: app_login
                check_path: app_login
            logout:
                path: app_logout

        # admin_area:
        #     pattern: ^/admin
        #     provider: mongodb_provider
        #     form_login:
        #         login_path: app_login
        #         check_path: app_login
        #     logout:
        #         path: app_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    # access_control:
    #     - { path: '^/admin/users', roles: ROLE_SUPER_ADMIN }
    #     - { path: '^/admin', roles: ROLE_ADMIN }
    #     - { path: '^/api/', roles: [ROLE_SUPERADMIN, ROLE_ADMIN] }
    #     - { path: '^/superadmin_panel', roles: ROLE_SUPERADMIN }
    #     - { path: '^/admin_panel', roles: ROLE_ADMIN }
    #     - { path: '^/client_panel', roles: ROLE_CLIENT }
    #     - { path: '^/specialist_panel', roles: ROLE_SPECIALIST }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
